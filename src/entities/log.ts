// Represents a log entry for tracking events, actions, or errors in the application
export interface Log {
    id?: string;           // Unique identifier for the log (optional if generated by backend)
    timestamp: string;     // ISO timestamp of when the log was created (e.g., "2025-03-05T12:00:00Z")
    level: LogLevel;       // Severity level of the log (e.g., INFO, ERROR)
    message: string;       // Descriptive message about the event
    userId?: string;       // Optional: ID of the user associated with the log
    context?: LogContext;  // Optional: Additional metadata about the event
  }

  // Enum for log severity levels
  export enum LogLevel {
    DEBUG = 'DEBUG',
    INFO = 'INFO',
    WARN = 'WARN',
    ERROR = 'ERROR',
    CRITICAL = 'CRITICAL',
  }

  // Type for additional context or metadata (e.g., screen, action, error details)
  export interface LogContext {
    screen?: string;          // Screen where the event occurred (e.g., "LoginScreen")
    action?: string;          // Action performed (e.g., "login", "budgetUpdate")
    error?: string;           // Error message or stack trace (if applicable)
    [key: string]: any;       // Allow arbitrary key-value pairs for flexibility
  }

  // Example factory function to create a Log instance
  export const createLog = (
    level: LogLevel,
    message: string,
    userId?: string,
    context?: LogContext
  ): Log => ({
    timestamp: new Date().toISOString(),
    level,
    message,
    userId,
    context,
  });
